{
	"info": {
		"_postman_id": "fcdf5551-183a-4289-96e0-0a1d4600f0a2",
		"name": "I269_test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28529155"
	},
	"item": [
		{
			"name": "Fetch_CSRF_Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.globals.set(\"ctok\", pm.response.headers.get('x-csrf-token'));\r",
							"\r",
							"pm.test(\"Status code should be 200 OK\",()=>{\r",
							"    pm.response.to.have.status(200);\r",
							"})"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const thepwd = pm.globals.get(\"userpwd\");\r",
							"pm.environment.set('thepwd',thepwd);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{thepwd}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "POSTMAN_TEST_QAC",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "x-csrf-token",
						"value": "fetch",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://65e1d53b-b6d1-43df-aa7d-542635f11ba4.abap.eu10.hana.ondemand.com/sap/opu/odata/sap/ZSRV_DM_PO_FORMS",
					"protocol": "https",
					"host": [
						"65e1d53b-b6d1-43df-aa7d-542635f11ba4",
						"abap",
						"eu10",
						"hana",
						"ondemand",
						"com"
					],
					"path": [
						"sap",
						"opu",
						"odata",
						"sap",
						"ZSRV_DM_PO_FORMS"
					]
				}
			},
			"response": []
		},
		{
			"name": "PO_Number_Details",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Variable declaration\r",
							"const responseJson = xml2Json(pm.response.text()); // Convert xml to JSON\r",
							"//console.log(responseJson);\r",
							"\r",
							"// Test assertions\r",
							"const csvData = pm.iterationData.toObject(); // Access CSV data\r",
							"const actualResponseCode = pm.response.code; // Fetch the actual response code from response body.\r",
							"const testType = (csvData.ScenarioType).toUpperCase();//Convert testType into Upper case.\r",
							"const PONumber= (csvData.PONumber).toString();//Convert POnumber into string.\r",
							"\r",
							"if (testType === \"POSITIVE\") {\r",
							"    switch (csvData.expectedResponseCode) {\r",
							"        case 201:\r",
							"            // Verify the expected response is same as actual response code.\r",
							"            pm.test(`Expected response code: ${csvData.expectedResponseCode} and Actual response code: ${actualResponseCode}`, () => {\r",
							"                pm.expect(actualResponseCode).to.equal(csvData.expectedResponseCode);\r",
							"            });\r",
							"            // Check if POnumber in response payload is equal to PO number coming from CSV file.\r",
							"            pm.test(`Expected PO number is: ${PONumber} and Actual PO number is: ${responseJson.entry.content[\"m:properties\"][\"d:purchase_order_no\"]}`, () => {\r",
							"                pm.expect(responseJson.entry.content[\"m:properties\"][\"d:purchase_order_no\"]).to.equal(PONumber);\r",
							"            });\r",
							"            // Check if EmailID in response payload is equal to EmailID coming from CSV file.\r",
							"            pm.test(`Expected EmailID is: ${csvData.EmailBody} and Actual EmailID is: ${responseJson.entry.content[\"m:properties\"][\"d:email\"]}`, () => {\r",
							"                pm.expect(responseJson.entry.content[\"m:properties\"][\"d:email\"]).to.equal(csvData.EmailBody);\r",
							"            });\r",
							"            // Check if BuyerName in response payload is equal to BuyerName coming from CSV file.\r",
							"            pm.test(`Expected BuyerName is: ${csvData.BuyerName} and Actual BuyerName is: ${responseJson.entry.content[\"m:properties\"][\"d:buyer_name\"]}`, () => {\r",
							"                pm.expect(responseJson.entry.content[\"m:properties\"][\"d:buyer_name\"]).to.equal(csvData.BuyerName);\r",
							"            });\r",
							"            // Check if StatusBody in response payload is equal to StatusBody coming from CSV file.\r",
							"            pm.test(`Expected StatusBody is: ${csvData.StatusBody} and Actual StatusBody is: ${responseJson.entry.content[\"m:properties\"][\"d:status\"]}`, () => {\r",
							"                pm.expect(responseJson.entry.content[\"m:properties\"][\"d:status\"]).to.equal(csvData.StatusBody);\r",
							"            });\r",
							"            break;\r",
							"\r",
							"        default:\r",
							"            pm.test(`Response code mismatch.`, () => {\r",
							"                pm.expect.fail(`Expected response code: ${csvData.expectedResponseCode} and Actual response code: ${pm.response.code}`);\r",
							"            });\r",
							"            break;\r",
							"    }\r",
							"} else if (testType === \"NEGATIVE\") {\r",
							"    switch (csvData.expectedResponseCode) {\r",
							"        case 400:\r",
							"            // Verify the expected response is same as actual response code.\r",
							"            pm.test(`Expected response code: ${csvData.expectedResponseCode} and Actual response code: ${actualResponseCode}`, () => {\r",
							"                pm.expect(actualResponseCode).to.equal(csvData.expectedResponseCode);\r",
							"            });\r",
							"            // Verify the expected error code is same as actual error code.\r",
							"            pm.test(`Expected error code: ${csvData.Code} and Received error code: ${responseJson.error[\"code\"]}`, () => {\r",
							"                pm.expect(responseJson.error[\"code\"]).to.equal(csvData.Code);\r",
							"            });\r",
							"            break;\r",
							"\r",
							"        default:\r",
							"            pm.test(`Response code mismatch.`, () => {\r",
							"                pm.expect.fail(`Expected response code: ${csvData.expectedResponseCode} and Actual response code: ${actualResponseCode}`);\r",
							"            });\r",
							"            break;\r",
							"    }\r",
							"} else {\r",
							"    pm.test(`Unhandled scenario testType: ${testType}`, () => {\r",
							"        pm.expect.fail(`scenario type should be POSITIVE or NEGATIVE`);\r",
							"    });\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{thepwd}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "POSTMAN_TEST_QAC",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "x-csrf-token",
						"value": "{{ctok}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"purchase_order_no\":\"{{PONumber}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://65e1d53b-b6d1-43df-aa7d-542635f11ba4.abap.eu10.hana.ondemand.com/sap/opu/odata/sap/ZSRV_DM_PO_FORMS/ZI_DM_PO_FORMS",
					"protocol": "https",
					"host": [
						"65e1d53b-b6d1-43df-aa7d-542635f11ba4",
						"abap",
						"eu10",
						"hana",
						"ondemand",
						"com"
					],
					"path": [
						"sap",
						"opu",
						"odata",
						"sap",
						"ZSRV_DM_PO_FORMS",
						"ZI_DM_PO_FORMS"
					]
				}
			},
			"response": []
		}
	]
}